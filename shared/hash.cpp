// TODO Replace with FNV1a, as used in hash_table.cpp?
// Currently used for: EsFS, theme constants, build core configuration hash, make bundle.

#ifdef __cplusplus
constexpr static uint32_t crc32Table[] = { 
#else
static uint32_t crc32Table[] = { 
#endif
	0x00000000, 0x77073096, 0xEE0E612C, 0x990951BA, 0x076DC419, 0x706AF48F, 0xE963A535, 0x9E6495A3, 
	0x0EDB8832, 0x79DCB8A4, 0xE0D5E91E, 0x97D2D988, 0x09B64C2B, 0x7EB17CBD, 0xE7B82D07, 0x90BF1D91,
	0x1DB71064, 0x6AB020F2, 0xF3B97148, 0x84BE41DE, 0x1ADAD47D, 0x6DDDE4EB, 0xF4D4B551, 0x83D385C7, 
	0x136C9856, 0x646BA8C0, 0xFD62F97A, 0x8A65C9EC, 0x14015C4F, 0x63066CD9, 0xFA0F3D63, 0x8D080DF5,
	0x3B6E20C8, 0x4C69105E, 0xD56041E4, 0xA2677172, 0x3C03E4D1, 0x4B04D447, 0xD20D85FD, 0xA50AB56B, 
	0x35B5A8FA, 0x42B2986C, 0xDBBBC9D6, 0xACBCF940, 0x32D86CE3, 0x45DF5C75, 0xDCD60DCF, 0xABD13D59,
	0x26D930AC, 0x51DE003A, 0xC8D75180, 0xBFD06116, 0x21B4F4B5, 0x56B3C423, 0xCFBA9599, 0xB8BDA50F, 
	0x2802B89E, 0x5F058808, 0xC60CD9B2, 0xB10BE924, 0x2F6F7C87, 0x58684C11, 0xC1611DAB, 0xB6662D3D,
	0x76DC4190, 0x01DB7106, 0x98D220BC, 0xEFD5102A, 0x71B18589, 0x06B6B51F, 0x9FBFE4A5, 0xE8B8D433, 
	0x7807C9A2, 0x0F00F934, 0x9609A88E, 0xE10E9818, 0x7F6A0DBB, 0x086D3D2D, 0x91646C97, 0xE6635C01,
	0x6B6B51F4, 0x1C6C6162, 0x856530D8, 0xF262004E, 0x6C0695ED, 0x1B01A57B, 0x8208F4C1, 0xF50FC457, 
	0x65B0D9C6, 0x12B7E950, 0x8BBEB8EA, 0xFCB9887C, 0x62DD1DDF, 0x15DA2D49, 0x8CD37CF3, 0xFBD44C65,
	0x4DB26158, 0x3AB551CE, 0xA3BC0074, 0xD4BB30E2, 0x4ADFA541, 0x3DD895D7, 0xA4D1C46D, 0xD3D6F4FB, 
	0x4369E96A, 0x346ED9FC, 0xAD678846, 0xDA60B8D0, 0x44042D73, 0x33031DE5, 0xAA0A4C5F, 0xDD0D7CC9,
	0x5005713C, 0x270241AA, 0xBE0B1010, 0xC90C2086, 0x5768B525, 0x206F85B3, 0xB966D409, 0xCE61E49F, 
	0x5EDEF90E, 0x29D9C998, 0xB0D09822, 0xC7D7A8B4, 0x59B33D17, 0x2EB40D81, 0xB7BD5C3B, 0xC0BA6CAD,
	0xEDB88320, 0x9ABFB3B6, 0x03B6E20C, 0x74B1D29A, 0xEAD54739, 0x9DD277AF, 0x04DB2615, 0x73DC1683, 
	0xE3630B12, 0x94643B84, 0x0D6D6A3E, 0x7A6A5AA8, 0xE40ECF0B, 0x9309FF9D, 0x0A00AE27, 0x7D079EB1,
	0xF00F9344, 0x8708A3D2, 0x1E01F268, 0x6906C2FE, 0xF762575D, 0x806567CB, 0x196C3671, 0x6E6B06E7, 
	0xFED41B76, 0x89D32BE0, 0x10DA7A5A, 0x67DD4ACC, 0xF9B9DF6F, 0x8EBEEFF9, 0x17B7BE43, 0x60B08ED5,
	0xD6D6A3E8, 0xA1D1937E, 0x38D8C2C4, 0x4FDFF252, 0xD1BB67F1, 0xA6BC5767, 0x3FB506DD, 0x48B2364B, 
	0xD80D2BDA, 0xAF0A1B4C, 0x36034AF6, 0x41047A60, 0xDF60EFC3, 0xA867DF55, 0x316E8EEF, 0x4669BE79,
	0xCB61B38C, 0xBC66831A, 0x256FD2A0, 0x5268E236, 0xCC0C7795, 0xBB0B4703, 0x220216B9, 0x5505262F, 
	0xC5BA3BBE, 0xB2BD0B28, 0x2BB45A92, 0x5CB36A04, 0xC2D7FFA7, 0xB5D0CF31, 0x2CD99E8B, 0x5BDEAE1D,
	0x9B64C2B0, 0xEC63F226, 0x756AA39C, 0x026D930A, 0x9C0906A9, 0xEB0E363F, 0x72076785, 0x05005713, 
	0x95BF4A82, 0xE2B87A14, 0x7BB12BAE, 0x0CB61B38, 0x92D28E9B, 0xE5D5BE0D, 0x7CDCEFB7, 0x0BDBDF21,
	0x86D3D2D4, 0xF1D4E242, 0x68DDB3F8, 0x1FDA836E, 0x81BE16CD, 0xF6B9265B, 0x6FB077E1, 0x18B74777, 
	0x88085AE6, 0xFF0F6A70, 0x66063BCA, 0x11010B5C, 0x8F659EFF, 0xF862AE69, 0x616BFFD3, 0x166CCF45,
	0xA00AE278, 0xD70DD2EE, 0x4E048354, 0x3903B3C2, 0xA7672661, 0xD06016F7, 0x4969474D, 0x3E6E77DB, 
	0xAED16A4A, 0xD9D65ADC, 0x40DF0B66, 0x37D83BF0, 0xA9BCAE53, 0xDEBB9EC5, 0x47B2CF7F, 0x30B5FFE9,
	0xBDBDF21C, 0xCABAC28A, 0x53B39330, 0x24B4A3A6, 0xBAD03605, 0xCDD70693, 0x54DE5729, 0x23D967BF, 
	0xB3667A2E, 0xC4614AB8, 0x5D681B02, 0x2A6F2B94, 0xB40BBE37, 0xC30C8EA1, 0x5A05DF1B, 0x2D02EF8D,
};

#ifdef __cplusplus
constexpr static uint64_t crc64Table[] = { 
#else
static uint64_t crc64Table[] = { 
#endif
	0x0000000000000000UL, 0x7AD870C830358979UL, 0xF5B0E190606B12F2UL, 0x8F689158505E9B8BUL, 0xC038E5739841B68FUL, 0xBAE095BBA8743FF6UL, 0x358804E3F82AA47DUL, 0x4F50742BC81F2D04UL, 
	0xAB28ECB46814FE75UL, 0xD1F09C7C5821770CUL, 0x5E980D24087FEC87UL, 0x24407DEC384A65FEUL, 0x6B1009C7F05548FAUL, 0x11C8790FC060C183UL, 0x9EA0E857903E5A08UL, 0xE478989FA00BD371UL, 
	0x7D08FF3B88BE6F81UL, 0x07D08FF3B88BE6F8UL, 0x88B81EABE8D57D73UL, 0xF2606E63D8E0F40AUL, 0xBD301A4810FFD90EUL, 0xC7E86A8020CA5077UL, 0x4880FBD87094CBFCUL, 0x32588B1040A14285UL, 
	0xD620138FE0AA91F4UL, 0xACF86347D09F188DUL, 0x2390F21F80C18306UL, 0x594882D7B0F40A7FUL, 0x1618F6FC78EB277BUL, 0x6CC0863448DEAE02UL, 0xE3A8176C18803589UL, 0x997067A428B5BCF0UL, 
	0xFA11FE77117CDF02UL, 0x80C98EBF2149567BUL, 0x0FA11FE77117CDF0UL, 0x75796F2F41224489UL, 0x3A291B04893D698DUL, 0x40F16BCCB908E0F4UL, 0xCF99FA94E9567B7FUL, 0xB5418A5CD963F206UL, 
	0x513912C379682177UL, 0x2BE1620B495DA80EUL, 0xA489F35319033385UL, 0xDE51839B2936BAFCUL, 0x9101F7B0E12997F8UL, 0xEBD98778D11C1E81UL, 0x64B116208142850AUL, 0x1E6966E8B1770C73UL, 
	0x8719014C99C2B083UL, 0xFDC17184A9F739FAUL, 0x72A9E0DCF9A9A271UL, 0x08719014C99C2B08UL, 0x4721E43F0183060CUL, 0x3DF994F731B68F75UL, 0xB29105AF61E814FEUL, 0xC849756751DD9D87UL, 
	0x2C31EDF8F1D64EF6UL, 0x56E99D30C1E3C78FUL, 0xD9810C6891BD5C04UL, 0xA3597CA0A188D57DUL, 0xEC09088B6997F879UL, 0x96D1784359A27100UL, 0x19B9E91B09FCEA8BUL, 0x636199D339C963F2UL, 
	0xDF7ADABD7A6E2D6FUL, 0xA5A2AA754A5BA416UL, 0x2ACA3B2D1A053F9DUL, 0x50124BE52A30B6E4UL, 0x1F423FCEE22F9BE0UL, 0x659A4F06D21A1299UL, 0xEAF2DE5E82448912UL, 0x902AAE96B271006BUL, 
	0x74523609127AD31AUL, 0x0E8A46C1224F5A63UL, 0x81E2D7997211C1E8UL, 0xFB3AA75142244891UL, 0xB46AD37A8A3B6595UL, 0xCEB2A3B2BA0EECECUL, 0x41DA32EAEA507767UL, 0x3B024222DA65FE1EUL, 
	0xA2722586F2D042EEUL, 0xD8AA554EC2E5CB97UL, 0x57C2C41692BB501CUL, 0x2D1AB4DEA28ED965UL, 0x624AC0F56A91F461UL, 0x1892B03D5AA47D18UL, 0x97FA21650AFAE693UL, 0xED2251AD3ACF6FEAUL, 
	0x095AC9329AC4BC9BUL, 0x7382B9FAAAF135E2UL, 0xFCEA28A2FAAFAE69UL, 0x8632586ACA9A2710UL, 0xC9622C4102850A14UL, 0xB3BA5C8932B0836DUL, 0x3CD2CDD162EE18E6UL, 0x460ABD1952DB919FUL, 
	0x256B24CA6B12F26DUL, 0x5FB354025B277B14UL, 0xD0DBC55A0B79E09FUL, 0xAA03B5923B4C69E6UL, 0xE553C1B9F35344E2UL, 0x9F8BB171C366CD9BUL, 0x10E3202993385610UL, 0x6A3B50E1A30DDF69UL, 
	0x8E43C87E03060C18UL, 0xF49BB8B633338561UL, 0x7BF329EE636D1EEAUL, 0x012B592653589793UL, 0x4E7B2D0D9B47BA97UL, 0x34A35DC5AB7233EEUL, 0xBBCBCC9DFB2CA865UL, 0xC113BC55CB19211CUL, 
	0x5863DBF1E3AC9DECUL, 0x22BBAB39D3991495UL, 0xADD33A6183C78F1EUL, 0xD70B4AA9B3F20667UL, 0x985B3E827BED2B63UL, 0xE2834E4A4BD8A21AUL, 0x6DEBDF121B863991UL, 0x1733AFDA2BB3B0E8UL, 
	0xF34B37458BB86399UL, 0x8993478DBB8DEAE0UL, 0x06FBD6D5EBD3716BUL, 0x7C23A61DDBE6F812UL, 0x3373D23613F9D516UL, 0x49ABA2FE23CC5C6FUL, 0xC6C333A67392C7E4UL, 0xBC1B436E43A74E9DUL, 
	0x95AC9329AC4BC9B5UL, 0xEF74E3E19C7E40CCUL, 0x601C72B9CC20DB47UL, 0x1AC40271FC15523EUL, 0x5594765A340A7F3AUL, 0x2F4C0692043FF643UL, 0xA02497CA54616DC8UL, 0xDAFCE7026454E4B1UL, 
	0x3E847F9DC45F37C0UL, 0x445C0F55F46ABEB9UL, 0xCB349E0DA4342532UL, 0xB1ECEEC59401AC4BUL, 0xFEBC9AEE5C1E814FUL, 0x8464EA266C2B0836UL, 0x0B0C7B7E3C7593BDUL, 0x71D40BB60C401AC4UL, 
	0xE8A46C1224F5A634UL, 0x927C1CDA14C02F4DUL, 0x1D148D82449EB4C6UL, 0x67CCFD4A74AB3DBFUL, 0x289C8961BCB410BBUL, 0x5244F9A98C8199C2UL, 0xDD2C68F1DCDF0249UL, 0xA7F41839ECEA8B30UL, 
	0x438C80A64CE15841UL, 0x3954F06E7CD4D138UL, 0xB63C61362C8A4AB3UL, 0xCCE411FE1CBFC3CAUL, 0x83B465D5D4A0EECEUL, 0xF96C151DE49567B7UL, 0x76048445B4CBFC3CUL, 0x0CDCF48D84FE7545UL, 
	0x6FBD6D5EBD3716B7UL, 0x15651D968D029FCEUL, 0x9A0D8CCEDD5C0445UL, 0xE0D5FC06ED698D3CUL, 0xAF85882D2576A038UL, 0xD55DF8E515432941UL, 0x5A3569BD451DB2CAUL, 0x20ED197575283BB3UL, 
	0xC49581EAD523E8C2UL, 0xBE4DF122E51661BBUL, 0x3125607AB548FA30UL, 0x4BFD10B2857D7349UL, 0x04AD64994D625E4DUL, 0x7E7514517D57D734UL, 0xF11D85092D094CBFUL, 0x8BC5F5C11D3CC5C6UL, 
	0x12B5926535897936UL, 0x686DE2AD05BCF04FUL, 0xE70573F555E26BC4UL, 0x9DDD033D65D7E2BDUL, 0xD28D7716ADC8CFB9UL, 0xA85507DE9DFD46C0UL, 0x273D9686CDA3DD4BUL, 0x5DE5E64EFD965432UL, 
	0xB99D7ED15D9D8743UL, 0xC3450E196DA80E3AUL, 0x4C2D9F413DF695B1UL, 0x36F5EF890DC31CC8UL, 0x79A59BA2C5DC31CCUL, 0x037DEB6AF5E9B8B5UL, 0x8C157A32A5B7233EUL, 0xF6CD0AFA9582AA47UL, 
	0x4AD64994D625E4DAUL, 0x300E395CE6106DA3UL, 0xBF66A804B64EF628UL, 0xC5BED8CC867B7F51UL, 0x8AEEACE74E645255UL, 0xF036DC2F7E51DB2CUL, 0x7F5E4D772E0F40A7UL, 0x05863DBF1E3AC9DEUL, 
	0xE1FEA520BE311AAFUL, 0x9B26D5E88E0493D6UL, 0x144E44B0DE5A085DUL, 0x6E963478EE6F8124UL, 0x21C640532670AC20UL, 0x5B1E309B16452559UL, 0xD476A1C3461BBED2UL, 0xAEAED10B762E37ABUL, 
	0x37DEB6AF5E9B8B5BUL, 0x4D06C6676EAE0222UL, 0xC26E573F3EF099A9UL, 0xB8B627F70EC510D0UL, 0xF7E653DCC6DA3DD4UL, 0x8D3E2314F6EFB4ADUL, 0x0256B24CA6B12F26UL, 0x788EC2849684A65FUL, 
	0x9CF65A1B368F752EUL, 0xE62E2AD306BAFC57UL, 0x6946BB8B56E467DCUL, 0x139ECB4366D1EEA5UL, 0x5CCEBF68AECEC3A1UL, 0x2616CFA09EFB4AD8UL, 0xA97E5EF8CEA5D153UL, 0xD3A62E30FE90582AUL, 
	0xB0C7B7E3C7593BD8UL, 0xCA1FC72BF76CB2A1UL, 0x45775673A732292AUL, 0x3FAF26BB9707A053UL, 0x70FF52905F188D57UL, 0x0A2722586F2D042EUL, 0x854FB3003F739FA5UL, 0xFF97C3C80F4616DCUL, 
	0x1BEF5B57AF4DC5ADUL, 0x61372B9F9F784CD4UL, 0xEE5FBAC7CF26D75FUL, 0x9487CA0FFF135E26UL, 0xDBD7BE24370C7322UL, 0xA10FCEEC0739FA5BUL, 0x2E675FB4576761D0UL, 0x54BF2F7C6752E8A9UL, 
	0xCDCF48D84FE75459UL, 0xB71738107FD2DD20UL, 0x387FA9482F8C46ABUL, 0x42A7D9801FB9CFD2UL, 0x0DF7ADABD7A6E2D6UL, 0x772FDD63E7936BAFUL, 0xF8474C3BB7CDF024UL, 0x829F3CF387F8795DUL, 
	0x66E7A46C27F3AA2CUL, 0x1C3FD4A417C62355UL, 0x935745FC4798B8DEUL, 0xE98F353477AD31A7UL, 0xA6DF411FBFB21CA3UL, 0xDC0731D78F8795DAUL, 0x536FA08FDFD90E51UL, 0x29B7D047EFEC8728UL,
};

#ifdef __cplusplus
constexpr static uint32_t CalculateCRC32(const void *_buffer, size_t length, uint32_t carry = 0) {
#else
static uint32_t CalculateCRC32(const void *_buffer, size_t length, uint32_t carry) {
#endif
	const uint8_t *buffer = (const uint8_t *) _buffer;
	uint32_t x = ~carry;
	
	for (uintptr_t i = 0; i < length; i++) {
		x = crc32Table[(x ^ (uint32_t) buffer[i]) & 0xFF] ^ (x >> 8);
	}
	
	return ~x;
}

#ifdef __cplusplus
constexpr static uint64_t CalculateCRC64(const void *_buffer, size_t length, uint64_t carry = 0) {
#else
static uint64_t CalculateCRC64(const void *_buffer, size_t length, uint64_t carry) {
#endif
	const uint8_t *buffer = (const uint8_t *) _buffer;
	uint64_t x = ~carry;
	
	for (uintptr_t i = 0; i < length; i++) {
		x = crc64Table[(x ^ (uint64_t) buffer[i]) & 0xFF] ^ (x >> 8);
	}
	
	return ~x;
}
